# name: CD

# on:
#   push:
#     branches: [ release ]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up JDK 11
#         uses: actions/setup-java@v3
#         with:
#           java-version: '17'
#           distribution: 'temurin'

#       - name: Grant execute permission for Gradle Wrapper
#         run: chmod +x gradlew

#       - name: Build JAR
#         run: ./gradlew clean bootJar

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build Docker image
#         run: |
#           docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/glue-be:latest .

#       - name: Push Docker image
#         run: |
#           docker push ${{ secrets.DOCKERHUB_USERNAME }}/glue-be:latest

#       - name: Deploy to EC2
#         uses: appleboy/ssh-action@v0.1.5
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ec2-user
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             RUNNING=$(docker ps -q --filter "publish=8080")
#             if [ -n "$RUNNING" ]; then
#               echo "Stopping and removing container(s) using port 8080: $RUNNING"
#               docker stop $RUNNING
#               docker rm   $RUNNING
#             fi
#             docker rm -f glue-be || true
#             docker pull ${{ secrets.DOCKERHUB_USERNAME }}/glue-be:latest
#             docker run -d \
#               --name glue-be \
#               -p 8080:8080 \
#               -v /home/ec2-user/config/application-prod.yml:/app/config/application.yml \
#               -e spring.config.location=classpath:/application.yml,file:/app/config/application.yml \
#               -e SPRING_PROFILES_ACTIVE=prod \
#               -e REDIS_HOST=redis \
#               ${{ secrets.DOCKERHUB_USERNAME }}/glue-be:latest

name: CD

on:
  push:
    branches: [ release ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy via Docker Compose
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 애플리케이션 디렉터리 준비
            APP_DIR=/home/ec2-user/app
            if [ ! -d "$APP_DIR" ]; then
              git clone --branch release https://github.com/${{ github.repository }} "$APP_DIR"
            else
              cd "$APP_DIR"
              git fetch origin release
              git checkout release
              git reset --hard origin/release
            fi

            cd "$APP_DIR"

            # 설정 파일 심볼릭 링크
            mkdir -p config
            ln -sf /home/ec2-user/config/application-prod.yml config/application-prod.yml

            # Docker Hub 로그인
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Docker Compose로 서비스 재배포
            docker-compose pull
            docker-compose up -d --remove-orphans



